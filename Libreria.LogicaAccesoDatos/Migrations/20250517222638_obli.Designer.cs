// <auto-generated />
using System;
using System.Collections.Generic;
using Libreria.LogicaAccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Libreria.LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517222638_obli")]
    partial class obli
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Coordenadas", "Libreria.LogicaNegocio.Entidades.Agencia.Coordenadas#Coordenadas", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitud")
                                .HasColumnType("float");

                            b1.Property<double>("Longitud")
                                .HasColumnType("float");
                        });

                    b.HasKey("Id");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntidadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("NroTracking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Peso")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoEnvio")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Envios");

                    b.HasDiscriminator<string>("TipoEnvio").HasValue("Envio");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.SeguimientoEnvio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComentarioEmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("EnvioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaComentario")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComentarioEmpleadoId");

                    b.HasIndex("EnvioId");

                    b.ToTable("SeguimientosEnvios");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.EnvioComun", b =>
                {
                    b.HasBaseType("Libreria.LogicaNegocio.Entidades.Envio");

                    b.Property<int>("AgenciaDestinoId")
                        .HasColumnType("int");

                    b.HasIndex("AgenciaDestinoId");

                    b.HasDiscriminator().HasValue("EnvioComun");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.EnvioUrgente", b =>
                {
                    b.HasBaseType("Libreria.LogicaNegocio.Entidades.Envio");

                    b.Property<bool?>("EntregaEficiente")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("EnvioUrgente");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Agencia", b =>
                {
                    b.OwnsOne("Libreria.LogicaNegocio.VO.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("AgenciaId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Calle");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Departamento");

                            b1.Property<int>("NroPuerta")
                                .HasColumnType("int")
                                .HasColumnName("NroPuerta");

                            b1.HasKey("AgenciaId");

                            b1.ToTable("Agencias");

                            b1.WithOwner()
                                .HasForeignKey("AgenciaId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.HasOne("Libreria.LogicaNegocio.Entidades.Usuario", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Libreria.LogicaNegocio.Entidades.Usuario", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.SeguimientoEnvio", b =>
                {
                    b.HasOne("Libreria.LogicaNegocio.Entidades.Usuario", "ComentarioEmpleado")
                        .WithMany()
                        .HasForeignKey("ComentarioEmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Libreria.LogicaNegocio.Entidades.Envio", "Envio")
                        .WithMany("Seguimientos")
                        .HasForeignKey("EnvioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComentarioEmpleado");

                    b.Navigation("Envio");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.EnvioComun", b =>
                {
                    b.HasOne("Libreria.LogicaNegocio.Entidades.Agencia", "AgenciaDestino")
                        .WithMany()
                        .HasForeignKey("AgenciaDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgenciaDestino");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.EnvioUrgente", b =>
                {
                    b.OwnsOne("Libreria.LogicaNegocio.VO.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("EnvioUrgenteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Calle");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Departamento");

                            b1.Property<int>("NroPuerta")
                                .HasColumnType("int")
                                .HasColumnName("NroPuerta");

                            b1.HasKey("EnvioUrgenteId");

                            b1.ToTable("Envios");

                            b1.WithOwner()
                                .HasForeignKey("EnvioUrgenteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.Navigation("Seguimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
